name: Deploy to Amazon ECS
on:
  push:
    branches:
      - main 
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ECR: ${{secrets.AWS_ECR_REPOSITORY}}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
      - name: Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Add Github Actions IP to Security group
        run: |
           aws ec2 authorize-security-group-ingress --group-name ${{ secrets.sg_example_04 }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32          
      - name: SSH into EC2 ${{ needs.determine-environment.outputs.environment }} instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            echo "set nvm directory so yarn in accessable"
            docker login -u AWS -p $(aws ecr get-login-password --region $AWS_REGION) ${{secrets.AWS_REPOSITORY}}.dkr.ecr.$AWS_REGION.amazonaws.com/${{secrets.AWS_IMAGE_NAME}}:latest
            sudo docker pull ${{secrets.AWS_REPOSITORY}}.dkr.ecr.$AWS_REGION.amazonaws.com/${{secrets.AWS_IMAGE_NAME}}:latest
            sudo docker run -dti --name "todo-back" -p 80:3000 ${docker}.dkr.ecr.${region}.amazonaws.com/${image}:latest           
      - name: Remove Github Actions IP from security group
        run: |
           aws ec2 revoke-security-group-ingress --group-name ${{ secrets.sg_example_04 }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      #   with:
      #     mask-password: 'false'
          
      # - name: Build, tag and push image to AWS ECR
      #   id: build
      #   env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     REPOSITORY: backend
      #     IMAGE_TAG: latest
      #   run: |
      #         docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
      #         docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      #         echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"  

     